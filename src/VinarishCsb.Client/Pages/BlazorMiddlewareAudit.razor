@page "/blazor_middlware_audit"
@attribute [Authorize]
@inject HttpClient Http
@inject IMatToaster matToaster
@inject IJSRuntime JSRuntime
@implements IDisposable
@if (apiLogItems == null)
{
    <LoadingBackground ShowLogoBox="true">
    </LoadingBackground>
}
else
{
    <h1>گزارش سامانه</h1>
    <p>
        در این بخش گزارش دادوستدهای  کاربران با سامانه نمایش داده شده است.
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>زمان</th>
                <th>کاربر</th>
                <th>بخش</th>
                <th>دستور</th>
                <th>درون‌مایه</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var context in apiLogItems)
            {
                {
                    if (context.Method.ToUpper() == "GET") continue;
                }
                <tr>
                    <td><i class="fa fa-clock-o fa-fw"></i>@ConvertToFormattedPersianCalendar(context.RequestTime.ToLocalTime())</td>
                    <td><i class="fa fa-user fa-fw"></i>@context.UserName</td>
                    <td><i class="fa fa-tree fa-fw"></i>@context.Path</td>
                    <td><i class="fa fa-pagelines fa-fw"></i>@context.Method</td>
                    <td>
                        @if (context.Method.ToUpper() == "PUT")
                        {
                            <span class="text-primary">
                                <i class="fa fa-pencil fa-fw"></i>
                                @context.ResponseBody
                            </span>
                        }
                        @if (context.Method.ToUpper() == "POST")
                        {
                            <span class="text-success">
                                <i class="fa fa-plus fa-fw"></i>
                                @context.ResponseBody
                            </span>
                        }
                        @if (context.Method.ToUpper() == "DELETE")
                        {
                            <span class="text-danger">
                                <i class="fa fa-trash fa-fw"></i>
                                @context.ResponseBody
                            </span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<ApiLogItemDto> apiLogItems;

    protected override async Task OnInitializedAsync()
    {
        ApiResponseDto apiResponse = await Http.GetJsonAsync<ApiResponseDto>("api/apilog");

        if (apiResponse.StatusCode == 200)
        {
            apiLogItems = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiLogItemDto[]>(apiResponse.Result.ToString()).ToList<ApiLogItemDto>();
            apiLogItems.Sort((x, y) => -x.RequestTime.CompareTo(y.RequestTime));
        }
        else
        {
            matToaster.Add(apiResponse.Message, MatToastType.Danger, "Api Log Items Retrieval Failed");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("MakeDataTable");
    }
    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("DestroyDataTable");
    }

}