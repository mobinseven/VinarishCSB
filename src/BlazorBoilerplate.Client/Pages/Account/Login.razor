@page "/account/login"
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider
@inject IMatToaster matToaster
@inject AppState appState
@*TODO: Add client-side validation*@

<MatCard>
    <div class="logo">
        <a href="/" title="Blazor Boilerplate Home"><img src="images/blazorboilerplate.svg" style="width:100px;" title="Blazor Boilerplate Home" alt="Blazor Boilerplate"/><br />Blazor Boilerplate</a>
        <br />
        <h4>Log In</h4>
        User -> Username: <b>user</b> Password: <b>user123</b><br />
        Admin -> Username: <b>admin</b> Password: <b>admin123</b><br />
    </div>
    <EditForm Model="@loginParameters" OnValidSubmit="@SubmitLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="@loginParameters.UserName" Label="User Name" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@loginParameters.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>
            <div class="form-group">
                <MatCheckbox @bind-Checked="@loginParameters.RememberMe" class="filled-in chk-col-blue">Remember Me</MatCheckbox>
                <MatButton class="float-right" OnClick="@SubmitLogin" Raised="true">Login</MatButton>
            </div>
            <hr />
            <div class="font-weight-normal text-center">
                <MatButton Outlined="true" Icon="person_add" Link="account/register">Create account</MatButton>
                <MatButton Outlined="true" Icon="home" Link="/">Home Page</MatButton>
            </div>
        </fieldset>
    </EditForm>
</MatCard>
<MatAccordion>
    <MatExpansionPanel @bind-Expanded="@forgotPasswordToggle">
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Forgot Password?</MatExpansionPanelHeader>
            <MatExpansionPanelSubHeader></MatExpansionPanelSubHeader>
        </MatExpansionPanelSummary>
        <MatExpansionPanelDetails>
            <div class="form-group">
                <MatTextField @bind-Value="@forgotPasswordParameters.Email" Label="Email" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatButton class="float-right" OnClick="@ForgotPassword" Raised="true">Submit</MatButton>
            </div>
        </MatExpansionPanelDetails>
    </MatExpansionPanel>
</MatAccordion>

@code {
    bool forgotPasswordToggle = false;
    LoginDto loginParameters { get; set; } = new LoginDto();
    ForgotPasswordDto forgotPasswordParameters { get; set; } = new ForgotPasswordDto();
       
    async Task SubmitLogin()
    {
        try
        {
            var response = await authStateProvider.Login(loginParameters);
            if (response.StatusCode == 200)
            {
                //Load User Profile
                UserProfileDto userProfileDto = await appState.GetUserProfile();

                if (string.IsNullOrEmpty(userProfileDto.LastPageVisited))
                {
                    navigationManager.NavigateTo(navigationManager.BaseUri + userProfileDto.LastPageVisited);
                }
                else
                {
                    navigationManager.NavigateTo("/dashboard");
                }                
            }
            else
            {
                matToaster.Add(response.Message, MatToastType.Danger, "Login Attempt Failed");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Login Attempt Failed");
        }
    }

    async Task ForgotPassword()
    {
        try
        {
            await authStateProvider.ForgotPassword(forgotPasswordParameters);
            matToaster.Add("Forgot Password Email Sent", MatToastType.Success);
            forgotPasswordParameters.Email = "";
            forgotPasswordToggle = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Reset Password Attempt Failed");
        }
    }
}
